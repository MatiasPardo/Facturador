package com.afip.ui.menu;

import com.afip.billing.model.CAEResponse;
import com.afip.config.AfipConfig;
import com.afip.service.AfipService;
import com.afip.ui.console.ConsoleInput;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;

public class MenuMonotributo {
    
    private static final Logger log = LoggerFactory.getLogger(MenuMonotributo.class);
    private final AfipService afipService;
    
    public MenuMonotributo(AfipService afipService) {
        this.afipService = afipService;
    }
    
    public void mostrar() {
        System.out.println("\n=== TESTS DE MONOTRIBUTO ===");
        System.out.println("1. üìä √öltimo comprobante monotributo");
        System.out.println("2. üìÑ Generar CAE monotributo");
        System.out.println("3. üß™ Prueba monotributo (importe bajo)");
        System.out.println("4. üîê Autenticar WSMTXCA");
        System.out.println("0. ‚¨ÖÔ∏è Volver");
        System.out.print("Opci√≥n: ");
        
        int opcion = ConsoleInput.leerOpcion();
        
        try {
            switch (opcion) {
                case 1: consultarUltimoComprobanteMonotributo(); break;
                case 2: generarCAEMonotributo(); break;
                case 3: pruebaMonotributo(); break;
                case 4: autenticarWSMTXCA(); break;
            }
        } catch (Exception e) {
            log.error("‚ùå Error: {}", e.getMessage());
        }
    }
    
    private void consultarUltimoComprobanteMonotributo() throws Exception {
        log.info("üìä Test: √öltimo Comprobante Monotributo");
        long ultimo = afipService.consultarUltimoComprobanteMonotributo(AfipConfig.PUNTO_VENTA_DEFAULT);
        log.info("√öltimo comprobante Monotributo PV {}: {}", AfipConfig.PUNTO_VENTA_DEFAULT, ultimo);
    }
    
    private void generarCAEMonotributo() throws Exception {
        log.info("üìÑ Test: CAE Monotributo");
        BigDecimal importe = ConsoleInput.leerImporte();
        CAEResponse cae = afipService.generarComprobanteMonotributo(importe);
        mostrarResultado(cae);
    }
    
    private void pruebaMonotributo() throws Exception {
        log.info("üß™ Test: Prueba Monotributo");
        CAEResponse cae = afipService.generarComprobanteMonotributo(new BigDecimal(AfipConfig.IMPORTE_PRUEBA));
        mostrarResultado(cae);
    }
    
    private void autenticarWSMTXCA() throws Exception {
        log.info("üîê Test: Autenticaci√≥n WSMTXCA");
        afipService.autenticarWSMTXCA();
    }
    
    private void mostrarResultado(CAEResponse cae) {
        if (cae.isSuccess()) {
            log.info("‚úÖ ¬°CAE MONOTRIBUTO GENERADO!");
            log.info("   üîê CAE: {}", cae.getCae());
            log.info("   üìÖ Vence: {}", cae.getFechaVencimiento());
        } else {
            log.error("‚ùå Error: {}", cae.getErrorMessage());
        }
    }
}